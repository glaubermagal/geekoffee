<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on GeeKoffee</title>
    <link>https://geekoffee.me/posts/</link>
    <description>Recent content in Posts on GeeKoffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 Glauber Magalhaes.&amp;nbsp;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;Some rights reserved&lt;/a&gt;.</copyright>
    <lastBuildDate>Wed, 16 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://geekoffee.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preview alternate template from unpublished theme</title>
      <link>https://geekoffee.me/posts/preview-alternate-template-from-unpublished-theme/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://geekoffee.me/posts/preview-alternate-template-from-unpublished-theme/</guid>
      <description>When we create a page in Shopify Admin, there is an option to choose a template that will be used to load that page. The problem is that you cannot set this option to use a template for a theme that is not published.
So how do you load a page using an unpublished theme template? Follow:
 Create a new page on the Shopify Admin On your unpublished theme, create a template on templates folder, for example: templates/page.</description>
    </item>
    
    <item>
      <title>Ensuring integrity, authenticity, and non-repudiation in data transmission using node.js</title>
      <link>https://geekoffee.me/posts/ensuring-integrity-authenticity-and-non-repudiation-in-data-transmission-using-nodejs/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://geekoffee.me/posts/ensuring-integrity-authenticity-and-non-repudiation-in-data-transmission-using-nodejs/</guid>
      <description>Core concepts of Information Security  Integrity: can the recipient be confident that the message has not been modified during its lifecycle? Authentication: can the recipient be confident that the message was originated from the sender? Non-repudiation: if the recipient passes the message and the proof to a third party, can the third party be confident that the message was originated from the sender? Availability: is the information available when it is needed?</description>
    </item>
    
    <item>
      <title>Handle error from setTimeout</title>
      <link>https://geekoffee.me/posts/handle-error-from-settimeout/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://geekoffee.me/posts/handle-error-from-settimeout/</guid>
      <description>This block of code does not work: try { setTimeout(function () { throw new Error(&amp;#39;error!&amp;#39;); }, 300) } catch (e) { console.log(&amp;#39;Caught error: &amp;#39;, e); } 
Functions scheduled to run with setTimeout are executed in the main loop, outside the scope of the block that originated them.
Therefore, to handle errors, change the order of try-catch and setTimeout, like this:
setTimeout(function () { try { throw new Error(&amp;#39;error!&amp;#39;); } catch (e) { console.</description>
    </item>
    
  </channel>
</rss>